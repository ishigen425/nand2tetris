function Math.init 0
push constant 0
return
function Math.abs 1
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
neg
pop local 0
goto IF_END0
label IF_FALSE0
push argument 0
pop local 0
label IF_END0
push local 0
return
function Math.multiply 6
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 4
push argument 0
neg
pop argument 0
goto IF_END0
label IF_FALSE0
push constant 0
pop local 4
label IF_END0
push argument 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
pop local 5
push argument 1
neg
pop argument 1
goto IF_END1
label IF_FALSE1
push constant 0
pop local 5
label IF_END1
push constant 0
pop local 0
push constant 1
pop local 1
push constant 0
pop local 2
push argument 0
pop local 3
label WHILE_EXP0
push local 0
push constant 15
lt
not
if-goto WHILE_END0
push local 0
push constant 1
add
pop local 0
push local 1
push argument 1
and
push constant 0
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 2
push local 3
add
pop local 2
label IF_FALSE2
push local 1
push local 1
add
pop local 1
push local 3
push local 3
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push local 4
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 2
neg
pop local 2
label IF_FALSE3
push local 5
push constant 1
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 2
neg
pop local 2
label IF_FALSE4
push local 2
return
function Math.mod 0
push argument 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
call Math.multiply 2
sub
return
function Math.divide 3
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 2
push argument 0
neg
pop argument 0
goto IF_END0
label IF_FALSE0
push constant 0
pop local 2
label IF_END0
push argument 1
push argument 0
gt
push argument 1
or
push constant 0
eq
push argument 1
or
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop local 0
goto IF_END1
label IF_FALSE1
push argument 0
push argument 1
push argument 1
add
call Math.divide 2
pop local 1
push argument 0
push local 1
push local 1
add
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
push local 1
add
pop local 0
goto IF_END2
label IF_FALSE2
push local 1
push local 1
add
push constant 1
add
pop local 0
label IF_END2
label IF_END1
push local 2
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 0
neg
pop local 0
label IF_FALSE3
push local 0
return
function Math.sqrt 5
push constant 1
pop local 2
push constant 8
call Array.new 1
pop local 4
push constant 0
push local 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 2
add
pop local 2
push constant 1
push local 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 2
add
pop local 2
push constant 2
push local 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 2
add
pop local 2
push constant 3
push local 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 2
add
pop local 2
push constant 4
push local 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 2
add
pop local 2
push constant 5
push local 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 2
add
pop local 2
push constant 6
push local 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 2
add
pop local 2
push constant 7
push local 4
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_EXP0
push local 1
push constant 0
lt
not
not
if-goto WHILE_END0
push local 0
push local 1
push local 4
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
pop local 0
label IF_FALSE0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.max 1
push constant 0
pop local 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
pop local 0
goto IF_END0
label IF_FALSE0
push argument 1
pop local 0
label IF_END0
push local 0
return
function Math.min 1
push constant 0
pop local 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
pop local 0
goto IF_END0
label IF_FALSE0
push argument 0
pop local 0
label IF_END0
push local 0
return
