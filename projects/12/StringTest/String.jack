// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array CharArray;
    field int Length;
    field int MaxLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if( maxLength = 0 ) {
            let maxLength = 1;
        }
        let MaxLength = maxLength;
        let CharArray = Array.new(MaxLength);
        let Length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do CharArray.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return Length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return CharArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let CharArray[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(Length < MaxLength){
            let CharArray[Length] = c;
            let Length = Length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(Length > 0){
            let Length = Length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int counter;
        var int ret;
        var int negFlg;
        // 先頭をチェック
        let counter = 0;
        let ret = 0;
        if((Length > 0) & (CharArray[0] = 45)){
            let negFlg = 1;
            let counter = 1;
        }else{
            let negFlg = 0;
            let counter = 0;
        }
        
        while((counter < Length) & ((47 < CharArray[counter]) | (CharArray[counter] < 58))){
            let ret = (ret * 10) + (CharArray[counter] - 48);
            let counter = counter + 1;
        }
        
        if(negFlg = 1){
            return -ret;
        }else{
            return ret;
        }
        
    }

    function char int2char(int val){
        return val + 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var char c;
        // Lenght の初期化処理をはじめの一回だけにするために、再帰処理用の別メソッドを呼び出す
        let Length = 0;
        if(val < 0){
            do appendChar(45);
            let val = -val;
        }

        let lastDigit = val - (10 * (val / 10));
        let c = String.int2char(lastDigit);
        if(val > 9){
            do setInt2(val / 10);
            do appendChar(c);
        }else{
            do appendChar(c);
        }
        return;
    }

    method void setInt2(int val){
        var int lastDigit;
        var char c;
        let lastDigit = val - (10 * (val / 10));
        let c = String.int2char(lastDigit);
        if(val > 9){
            do setInt2(val / 10);
            do appendChar(c);
        }else{
            do appendChar(c);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
